{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Homework%201/","title":"HOMEWORK I","text":""},{"location":"Homework%201/#imports-and-stuff","title":"Imports and stuff","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n#gauss distribution\ndef carl_friedrich(x,a,mu,sig):\n    return a * np.exp(-(x - mu)**2/(2*sig**2))\n</code></pre> <p>Setting the parameters for matplotlib backend. Using TeX as backend for text. </p> <pre><code>params = {\n      'text.latex.preamble': r\"\\usepackage{mlmodern}\",\n      'legend.fontsize': 9,\n      'axes.labelsize': 9,\n      'axes.titlesize': 11,\n      'xtick.labelsize' :9,\n      'ytick.labelsize' : 9,\n      #'mathtext.fontset': 'cm',\n      #'mathtext.rm': 'stixsans',\n      'font.family' : 'mlmodern', \n      #'font.family' : 'sans-serif',\n      'text.usetex' : True,\n      }\nplt.rcParams.update(params)\n</code></pre>"},{"location":"Homework%201/#getting-data","title":"Getting data","text":"<p>Loading provided data and generating datasets based on parameters \\(\\mu\\) and \\(\\sigma\\) of Gaussian distribution. Which bins are used as parameters for sampled gaussian distribution is given by <code>selected_bins</code>. Selected bins and their count can be changed and the code should still work.</p> <pre><code>data = np.loadtxt(\"data.csv\", skiprows=1, delimiter=\",\") #load dataset\n\nselected_bins = [11,12,13,14,15,16,17] #bins from dataset to select for gaussian sampling\nbins = len(selected_bins) #number of selected bins\nsamples = 100000 #no. of samples taken\n\nhpp_samples, hAA_samples, ratios = [],[],[]\n\ndataSelected = np.take(data, selected_bins, axis=0) #select bins given by indexes from array selected_bins from data\n\nfor row in dataSelected:  #iterates over data. Data in format: [index | hpp | hpp_error | hAA | hAA_error] \n\n    hAA = np.random.normal(row[3], row[4], samples) #randomly samples gaussian distribution with parameters gicen by data\n    hpp = np.random.normal(row[1], row[2], samples)\n\n    hpp_samples.append(hpp)\n    hAA_samples.append(hAA)\n    ratios.append(hAA/hpp)\n\n#_, hpp_mu, hpp_sig, hAA_mu, hAA_sig = dataSelected.T\n</code></pre>"},{"location":"Homework%201/#fit","title":"Fit","text":"<pre><code>sigmaL, sigmaR, paramsL, paramsR, limits, xrange = [],[],[],[], [], []\n\nfor hist in ratios:\n\n    vals, edges = np.histogram(hist,bins=50) #histogram from individual measurement values\n    centers = (edges[1:] + edges[:-1]) / 2 #calculation of center of bins\n    limit = np.argmax(vals) #index of bin with the maximum value\n\n    limits.append(limit)\n    xrange.append(centers)\n\n    popt, _ = curve_fit(carl_friedrich, centers[:limit+1], vals[:limit+1]) #left fit of the histogram using carl\n    sigmaL.append(popt[2])\n    paramsL.append(popt)\n\n    popt, _ = curve_fit(carl_friedrich, centers[limit:], vals[limit:]) #right fit of the histogram using carl\n    sigmaR.append(popt[2])\n    paramsR.append(popt)\n</code></pre>"},{"location":"Homework%201/#plotting","title":"Plotting","text":"<pre><code>fig, axs = plt.subplots(bins, 3, layout=\"constrained\", figsize=(12, 2*bins))\n#fig.subplots_adjust(hspace=0, vspace=0) #graphs without spacing\n\nfor (col1, col2, col3), hAA, hpp, ratio, legend, pL, pR, x, limit in zip(axs, hAA_samples, hpp_samples, ratios, dataSelected, paramsL, paramsR, xrange, limits): #iteration through all of the data needed for plotting\n\n    col1.hist(hAA, bins = 50, color='lightskyblue', edgecolor='dodgerblue', alpha=.8, label = '$\\mu = {:.1e}$ \\n $\\sigma = {:.1e}$'.format(legend[3],legend[4])) #col1 corresponds to hAA\n    col2.hist(hpp, bins = 50, color='seagreen', edgecolor='darkgreen', alpha=.8, label = '$\\mu = {:.1e}$ \\n $\\sigma = {:.1e}$'.format(legend[1],legend[2])) #col2 corresponds to hpp\n    col3.hist(ratio, bins = 50, color='lightcoral', edgecolor='dimgrey', alpha=.8) #col3 corresponds to Ratios\n\n    col3.plot(x[:limit+1], carl_friedrich(x[:limit+1],*pL),c='navy', lw=1, label = '$\\sigma_l = {:.2e}$'.format(np.abs(pL[2]))) #plot of the left fit\n    col3.plot(x[limit:], carl_friedrich(x[limit:],*pR), c='crimson', lw=1, label = '$\\sigma_r = {:.2e}$'.format(np.abs(pR[2]))) #plot of the right fit   \n\n    col1.legend(loc=\"upper right\", fontsize=10, fancybox=False, borderpad=.2)\n    col2.legend(loc=\"upper right\", fontsize=10, fancybox=False, borderpad=.2)\n    col3.legend(loc=\"upper right\", fontsize=10, fancybox=False, borderpad=.2)\n\n\naxs[0,0].set_title(\"hAA\")\naxs[0,1].set_title(\"hpp\")\naxs[0,2].set_title(\"Ratio\")\n\nplt.savefig('output/hw1.pdf')\nplt.show()\n</code></pre> <pre><code>\n</code></pre>"},{"location":"Homework%202/","title":"HOMEWORK II","text":""},{"location":"Homework%202/#imports-and-stuff","title":"Imports and stuff","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\n#gauss distribution\ndef carl_friedrich(x,a,mu,sig):\n    return a * np.exp(-(x - mu)**2/(2*sig**2))\n</code></pre> <pre><code>params = {\n      'text.latex.preamble': r\"\\usepackage{mlmodern}\",\n      'legend.fontsize': 9,\n      'axes.labelsize': 9,\n      'axes.titlesize': 11,\n      'xtick.labelsize' :9,\n      'ytick.labelsize' : 9,\n      #'mathtext.fontset': 'cm',\n      #'mathtext.rm': 'stixsans',\n      'font.family' : 'mlmodern', \n      #'font.family' : 'sans-serif',\n      'text.usetex' : True,\n      }\nplt.rcParams.update(params)\n</code></pre>"}]}